---
- name: Get running VMs
  community.libvirt.virt:
    command: list_vms
  register: _existing_vms
  check_mode: false
  changed_when: false

- name: Set image name
  ansible.builtin.set_fact:
    image_name: "{{ virtual_machine.image.url | split('/') | last }}"

- name: Template virtual install command
  ansible.builtin.set_fact:
    _virt_install_cmd: |
      virt-install
       --name={{ virtual_machine.name }}
       --memory={{ virtual_machine.ram | string }}
       --vcpus={{ virtual_machine.vcpus | string }}

       --disk path={{ vm_pool.dir }}/{{ virtual_machine.name }}-cloudinit.qcow2,
      size={{ virtual_machine.disksize }},
      backing_store={{ vm_pool.dir }}/{{ image_name }},
      pool={{ virtual_machine.pool }}

      {% for network in virtual_machine.networks +%} --network network={{ network }},
      model=virtio
      {% endfor +%}

       --os-variant {% if not virtual_machine.os is defined %}detect=on,require=on{% else %}{{ virtual_machine.os }}{% endif %}

       --cloud-init disable=on,{% if libvirt_cloud_init_custom %}
      user-data={{ _temp_cloud_init_config_storage.path }}/user-data-{{ virtual_machine.name }}.yaml,
      network-config={{ _temp_cloud_init_config_storage.path }}/network-data-{{ virtual_machine.name }}.yaml
      {% if libvirt_cloud_init_reboot_on_finish is sameas true %} --wait=-1{% endif %}
      {% else %}
      root-password-generate=on
      {% endif %}


- name: Display _virt_install_cmd
  ansible.builtin.debug:
    msg: "{{ _virt_install_cmd }}"

- name: Create VM when it does not exist
  ansible.builtin.command: "{{ _virt_install_cmd | replace('\n', '') }}"
  become: true
  changed_when: true
  register: _virt_install_logs
  ignore_errors: "{{ ansible_check_mode }}"

- name: Show install logs when required
  ansible.builtin.debug:
    msg: "{{ item }}"
  when: libvirt_display_installation_logs
  loop: "{{ _virt_install_logs.stdout_lines }}"
  changed_when: true

- name: Autostart VM
  community.libvirt.virt:
    name: "{{ virtual_machine.name }}"
    autostart: true
  changed_when: true
  become: true
  ignore_errors: "{{ ansible_check_mode }}"

- name: Ensure VM is powered on again cloud_init run (manually start it)
  community.libvirt.virt:
    name: "{{ virtual_machine.name }}"
    state: running
  become: true
  when: libvirt_cloud_init_reboot_on_finish is sameas true
